static volatile int n = 32;
static std::vector < std::vector < double > > A { { { -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -1.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, -0.010000, -0.000000, -0.000000, -0.020000, 0.010000, 0.020000, 0.000000, 0.000000, -0.010000, 0.000000, 0.000000, 0.000000, -0.010000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, 0.005000, -0.015000, -0.000000, -0.000000, -0.500000, 0.015000, 0.000000, -0.005000, -0.005000, 0.000000, 0.000000, -0.005000, 0.000000, 0.000000, 0.500000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.020000, -0.010000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.020000, 0.000000, 0.000000, 0.000000, 0.000000, -0.020000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, 0.010000, -0.000000, -0.000000, 1.000000, -0.666667, 0.000000, 0.006667, -0.003333, 0.000000, 0.000000, 0.006667, 0.000000, 0.000000, -1.666667, 0.666667, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, -0.666667, 0.000000, -0.500000, -0.005000, -0.000000, 0.020000, 0.000000, -0.005000, 0.000000, -0.500000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { 0.010000, 0.030000, 0.010000, -0.000000, 0.010000, -0.000000, -0.500000, 0.000000, -0.500000, -0.750000, -0.012500, -0.000000, 0.000000, 0.020000, -0.012500, 0.000000, -0.750000, 0.500000, 0.500000, 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, 0.010000, -0.010000, -0.500000, 0.000000, 0.000000, 0.750000, 0.002500, -0.000000, 0.000000, -0.500000, 0.003750, -0.000000, 1.375000, -0.250000, 0.250000, 1.000000, 0.000000, -0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.666667, 0.000000, 0.500000, 0.005000, -0.000000, -0.500000, 0.000000, -0.002500, -0.000000, 0.181818, -1.454545, -0.045455, -0.181818, 0.000000, 0.090909, 0.000000, -0.500000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.125000, 0.000000, 0.000000, -0.000000, 0.000000, 0.125000, 0.000937, -0.000000, 0.068182, 0.031250, -1.203125, -0.062500, 0.000000, 0.156250, 0.000000, 0.015625, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.150000, 0.000500, -0.000000, 0.000000, -0.100000, 0.000750, -0.000000, 0.127273, 0.012500, -0.015584, -1.125974, 0.000000, -0.035065, 0.000000, 0.006494, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.005000, 0.005000, -0.250000, 0.000000, -0.003750, -0.000000, -0.090909, -0.156250, -0.012987, -0.054787, -1.000000, -0.031142, -1.000000, -0.327566, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.150000, -0.000500, -0.000000, 0.000000, 0.100000, -0.000750, -0.000000, -0.127273, -0.012500, 0.015584, -0.111880, -0.000000, 1.031142, 0.000000, -0.005767, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -1.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, -0.125000, 0.000000, 0.000000, -0.000000, 0.000000, -0.125000, -0.000937, -0.000000, -0.068182, -0.031250, -0.168831, -0.046136, -0.000000, -0.127517, 1.000000, -0.013423, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.127517 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.005000, -0.005000, 0.250000, 0.000000, 0.003750, -0.000000, 0.090909, 0.156250, 0.012987, 0.054787, -0.000000, 0.030201, 0.000000, 1.327740, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.030201 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -1.000000, 0.000000, -1.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -1.000000, 0.000000, -1.000000, 0.000000, 0.000000, 1.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, 0.008490, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -1.000000, -0.000000, -1.000000, 0.000000, -1.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, -0.010000, -0.015000, 0.005000, -0.000000, -0.000000, 0.000000, -0.333333, 0.000000, -0.250000, 0.012500, -0.000000, 0.000000, -0.500000, -0.006250, -0.000000, -0.454545, -0.437500, -0.285714, -0.317186, -1.000000, -0.664430, -1.000000, -0.419545, -0.000000, -1.000000, -0.000000, -1.000000, 0.000000, 0.000000, 1.000000, -0.779275 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.008490, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.000000, -1.000000, -0.000000, -1.000000, 0.000000, 0.000000, 0.000000 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, -0.000000, -0.500000, 0.000000, 0.002500, -0.000000, -0.181818, -0.312500, -0.025974, -0.109573, -0.000000, -0.060403, 0.000000, -0.493682, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -1.000000, -1.000000, -0.045493 }, { -0.000000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.500000, 0.000000, 0.000000, -0.750000, -0.002500, -0.000000, 0.000000, -0.000000, 0.002500, -0.000000, -0.545455, -0.250000, -0.103896, -0.438293, -0.000000, -0.241611, 0.000000, -0.091828, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -1.000000, -1.000000, -0.284330 }, { 0.010000, 0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 0.000000, 0.000000, -0.500000, 0.000000, 0.000000, -0.000000, 0.000000, 0.000000, -0.000000, -0.000000, 0.000000, -0.000000, -0.415584, 0.023068, -0.000000, 0.063758, 0.000000, 0.005055, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, -0.000000, 1.063606 } } };
static std::vector < double > B { 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.023837, -0.023837, 0.000000, 5.000000, 5.000000, 5.000000, 5.000000, 5.000000, 5.000000, 2.000000, 5.000000, -4.387573, -4.387573 };
static std::vector < int > IPVT { 24, 27, 26, 23, 22, 25, 22, 23, 24, 22, 28, 29, 14, 27, 30, 31, 25, 23, 24, 22, 28, 31, 30, 29, 31, 31, 30, 30, 28, 31, 30, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
static volatile double a0, b0;

static bool lu_factor( double a[32][32], int n, int ipvt[ 46 ]) {
    //long startTime = System.nanoTime();

    int i, j, k, largestRow;
    double q, x, mult, largest;
    //System.out.println( "-f : " + ( System.nanoTime() - startTime ) );

    // divide each row by its largest element, keeping track of the
    // scaling factors

    //boolean row_all_zeros;
    for( i = 0; i != n; i++ ) {
        bool row_all_zeros = true;
        for( j = 0; j != n; j++ ) {
            if( a[ i ][ j ] != 0 ) {
                row_all_zeros = false;
                break;
            }
        }
        // if all zeros, it's a singular matrix
        if( row_all_zeros )
            return false;
    }

    //System.out.println( "-f 1 : " + ( System.nanoTime() - startTime ) );

    // use Crout's method; loop through the columns
    for( j = 0; j != n; j++ ) {

        // calculate upper triangular elements for this column
        for( i = 0; i != j; i++ ) {
            q = a[ i ][ j ];
            for( k = 0; k != i; k++ )
                q -= a[ i ][ k ] * a[ k ][ j ];
            a[ i ][ j ] = q;
        }
        //System.out.println( "-f 2 : " + ( System.nanoTime() - startTime ) );

        // calculate lower triangular elements for this column
        largest = 0;
        largestRow = -1;
        for( i = j; i != n; i++ ) {
            q = a[ i ][ j ];
            for( k = 0; k != j; k++ )
                q -= a[ i ][ k ] * a[ k ][ j ];
            a[ i ][ j ] = q;
            x = q < 0.0 ? -q : q;
            if( x >= largest ) {
                largest = x;
                largestRow = i;
            }
        }
        // System.out.println( "-f 3 : " + ( System.nanoTime() - startTime ) );

        // pivoting
        if( j != largestRow ) {
            for( k = 0; k != n; k++ ) {
                x = a[ largestRow ][ k ];
                a[ largestRow ][ k ] = a[ j ][ k ];
                a[ j ][ k ] = x;
            }
        }
        //System.out.println( "-f 4 : " + ( System.nanoTime() - startTime ) );

        // keep track of row interchanges
        ipvt[ j ] = largestRow;

        // avoid zeros
        if( a[ j ][ j ] == 0.0 ) {
            //System.out.println("avoided zero");
            a[ j ][ j ] = 1e-8f;
        }

        if( j != n - 1 ) {
            mult = 1.0f / a[ j ][ j ];
            for( i = j + 1; i != n; i++ )
                a[ i ][ j ] *= mult;
        }
        // System.out.println( "-f 5 : " + ( System.nanoTime() - startTime ) );
    }
    // System.out.println( "-f : " + ( System.nanoTime() - startTime ) );
    return true;
}
static void lu_solve1( const std::vector < std::vector < double > > & a, const int n, const std::vector < int > & ipvt, std::vector < double > & b ) {
    int i, j, bi, row;
    double swap, tot;
    for( i = 0; i < n; i++ ) {
        row = ipvt.at( i );
        swap = b.at( row );
        b.at( row ) = b.at( i );
        b.at( i ) = swap;
        if( swap != 0 )
            break;
    }

    bi = i++;
    for( ; i < n; i++ ) {
        row = ipvt.at( i );
        tot = b.at( row );
        b.at( row ) = b.at( i );
        for( j = bi; j < i; j++ )
            tot -= a.at( i ).at( j ) * b.at( j );
        b.at( i ) = tot;
    }
    for( i = n - 1; i >= 0; i-- ) {
        tot = b.at( i );
        for( j = i + 1; j != n; j++ )
            tot -= a.at( i ).at( j ) * b.at( j );
        b.at( i ) = tot / a.at( i ).at( i );
    }
}

static void test() {
    long start = clock(), end, steps = 1000000L;
    while( steps-- > 0 ) {
        std::vector < std::vector < double > > a{ A };
        std::vector < double > b{ B };
        std::vector < int > ipvt{ IPVT };
        //lu_factor( a, n, ipvt );
        lu_solve1( a, n, ipvt, b );
        a0 = a[ 0 ][ 0 ];
        b0 = b[ 0 ];
    }
    end = clock();
    printf( "Test time : %lf\n", ( end - start ) / (double)CLOCKS_PER_SEC * 1000. );
    printf( "Result : %lf %lf\n", a0, b0 );
}

int main( int argc, char * argv[], char ** env) {

    test();
    return 0;
